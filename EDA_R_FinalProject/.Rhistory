# which is named mtcars.
# Run this next command to load the mtcars data.
data(mtcars)
# You should see mtcars appear in the 'Environment' tab with
# <Promise> listed next to it.
# The object (mtcars) appears as a 'Promise' object in the
# workspace until we run some code that uses the object.
# R has stored the mtcars data into a spreadsheet-like object
# called a data frame. Run the next command to see what variables
# are in the data set and to fully load the data set as an
# object in R. You should see <Promise> disappear when you
# run the next line of code.
# Visit http://cran.r-project.org/doc/manuals/r-release/R-lang.html#Promise-objects
# if you want the expert insight on Promise objects. You won't
# need to the info on Promise objects to be successful in this course.
names(mtcars)
# names(mtcars) should output all the variable
# names in the data set. You might notice that the car names
# are not a variable in the data set. The car names have been saved
# as row names. More on this later.
# You should also see how many observations (obs.) are in the
# the data frame and the number of variables on each observation.
# 7. To get more information on the data set and the variables
# run the this next line of code.
?mtcars
# You can type a '?' before any command or a data set to learn
# more about it. The details and documentation will appear in
# the 'Help' tab.
# 8. To print out the data, run this next line as code.
mtcars
# Scroll up and down in the console to check out the data.
# This is the entire data frame printed out.
# 9. Run these next two functions, one at a time,
# and see if you can figure out what they do.
str(mtcars)
dim(mtcars)
# Scroll down for the answer.
# The first command, str(mtcars), gives us the structure of the
# data frame. It lists the variable names, the type of each variable
# (all of these variables are numerics) and some values for each
# variable.
# The second command, dim(mtcars), should output '[1] 32 11'
# to the console. The [1] indicates that 32 is the first value
# in the output.
# R uses 1 to start indexing (AND NOT ZERO BASED INDEXING as is true
# of many other programming languages.)
# 10. Read the documentation for row.names if you're want to know more.
?row.names
# Run this code to see the current row names in the data frame.
row.names(mtcars)
# Run this code to change the row names of the cars to numbers.
row.names(mtcars) <- c(1:32)
# Now print out the data frame by running the code below.
mtcars
# It's tedious to relabel our data frame with the right car names
# so let's reload the data set and print out the first ten rows.
data(mtcars)
head(mtcars, 10)
# The head() function prints out the first six rows of a data frame
# by default. Run the code below to see.
head(mtcars)
# I think you'll know what this does.
tail(mtcars, 3)
# 11. We've run nine commands so far:
#      c, nchar, data, str, dim, names, row.names, head, and tail.
# All of these commands took some inputs or arguments.
# To determine if a command takes more arguments or to learn
# about any default settings, you can look up the documentation
# using '?' before the command, much like you did to learn about
# the mtcars data set and the row.names
# 12. Let's examine our car data more closely. We can access an
# an individual variable (or column) from the data frame using
# the '$' sign. Run the code below to print out the variable
# miles per gallon. This is the mpg column in the data frame.
mtcars$mpg
# Print out any two other variables to the console.
# This is a vector containing the mpg (miles per gallon) of
# the 32 cars. Run this next line of code to get the average mpg for
# for all the cars. What is it?
# Enter this number for the quiz on the Udacity website.
# https://www.udacity.com/course/viewer#!/c-ud651/l-729069797/e-804129314/m-830829287
mean(mtcars$mpg)
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
"Kunal Chawla", 'Andrew Bauman')
"Kunal Chawla", "Andrew Bauman")
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Andrew Bauman")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
names(mtcars)
?mtcars
?mtcars
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
data(mtcars)
head(mtcars, 10)
head(mtcars)
tail(mtcars, 3)
mtcars$mpg
mean(mtcars$mpg)
gwtwd()
getwd()
summary(mtcars)
efficient <- subset(mtcars, mpg >= 23)
View(efficient)
str(mtcars)
str(efficient)
dim(efficient)
subset(mtcars, mpg < 14 | disp > 390)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, qsec <= 16.90)
lightCars <- subset(mtcars, wt < 2)
mtcars$year <- 1974
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
subset(mtcars, mpg >= 30 | hp < 60)
```{r}
install.packages('knitr', dependencies = T)
library(knitr)
```
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
data(diamonds)
library(ggplot2)
data(diamonds)
summary(diamonds)
View(diamonds)
load("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/L4.RData")
#create data sets
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
#create plots
p1 = ggplot(aes(x = clarity, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = clarity))
p2 = ggplot(aes(x = color, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = color))
grid.arrange(p1,p2,ncol = 1)
library(ggplot2)
library(gridExtra)
library(dplyr)
library('alr3')
library(dplyr)
#create data sets
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
#create plots
p1 = ggplot(aes(x = clarity, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = clarity))
p2 = ggplot(aes(x = color, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = color))
grid.arrange(p1,p2,ncol = 1)
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
p3 = ggplot(aes(x = cut, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = cut))
grid.arrange(p1,p2,p3,ncol = 1)
workhours <- read.csv("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/workinghours.csv")
names(workhours)
View(workhours)
gmp1 = ggplot(aes( x = year, y = value), data = workhours) +
geom_point(fill = 'orange')
gmp2 = ggplot(aes( x = country, y = value), data = workhours) +
geom_point(fill = 'red')
grid.arrange(gmp1,gmp2,ncol1)
gmp1 = ggplot(aes( x = year, y = value), data = workhours) +
geom_point(fill = 'orange')
gmp2 = ggplot(aes( x = country, y = value), data = workhours) +
geom_point(fill = 'red')
grid.arrange(gmp1,gmp2,ncol =1)
View(lightCars)
View(lightCars)
source('~/.active-rstudio-document', echo=TRUE)
table(pf$year_joined.bucket)
summary(pf$year_joined.bucket)
by(pf$friendships_initiated, pf$year_joined.bucket, mean(x))
by(pf, pf$year_joined.bucket, mean(pf$friendships_initiated))
by(pf, year_joined.bucket, mean(friendships_initiated))
by(pf, pf$year_joined.bucket, summmary)
by(pf, pf$year_joined.bucket, summary)
by(pf$friendships_initiated, pf$year_joined.bucket, summary)
by(pf$friendships_initiated, pf$year_joined.bucket, mean)
by(pf$prop_initiated, pf$year_joined.bucket, mean)
subset(pf, !is.na(pf$prop_initiated) )
by(subset(pf, !is.na(pf$prop_initiated)), pf$year_joined.bucket, mean)
by(subset(pf, !is.na(pf$prop_initiated)), pf$year_joined.bucket, mean)
subset(pf, !is.na(pf$prop_initiated))
propnum = subset(pf, !is.na(pf$prop_initiated))
by(propnum$prop_initiated, propnum$year_joined.bucket, mean)
# Create a scatter plot of the price/carat ratio
# of diamonds. The variable x should be
# assigned to cut. The points should be colored
# by diamond color, and the plot should be
# faceted by clarity.
# The plot should look something like this.
# http://i.imgur.com/YzbWkHT.jpg.
# Note: In the link, a color palette of type
# 'div' was used to color the histogram using
# scale_color_brewer(type = 'div')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
ggplot(data = diamonds, aes(x = cut, y = price/carat)) +
geom_point(aes(color = clarity)) +
facet_wrap(~clarity)
# Create a scatter plot of the price/carat ratio
# of diamonds. The variable x should be
# assigned to cut. The points should be colored
# by diamond color, and the plot should be
# faceted by clarity.
# The plot should look something like this.
# http://i.imgur.com/YzbWkHT.jpg.
# Note: In the link, a color palette of type
# 'div' was used to color the histogram using
# scale_color_brewer(type = 'div')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
ggplot(data = diamonds, aes(x = cut, y = price/carat)) +
geom_point(aes(color = clarity)) +
scale_x_log10() +
facet_wrap(~clarity) +
scale_color_brewer(type = "div")
# Create a scatter plot of the price/carat ratio
# of diamonds. The variable x should be
# assigned to cut. The points should be colored
# by diamond color, and the plot should be
# faceted by clarity.
# The plot should look something like this.
# http://i.imgur.com/YzbWkHT.jpg.
# Note: In the link, a color palette of type
# 'div' was used to color the histogram using
# scale_color_brewer(type = 'div')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
ggplot(data = diamonds, aes(x = cut, y = price/carat)) +
geom_point(aes(color = clarity)) +
facet_wrap(~clarity) +
scale_color_brewer(type = "div")
# Create a scatter plot of the price/carat ratio
# of diamonds. The variable x should be
# assigned to cut. The points should be colored
# by diamond color, and the plot should be
# faceted by clarity.
# The plot should look something like this.
# http://i.imgur.com/YzbWkHT.jpg.
# Note: In the link, a color palette of type
# 'div' was used to color the histogram using
# scale_color_brewer(type = 'div')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
ggplot(data = diamonds, aes(x = cut, y = price/carat)) +
geom_point(aes(color = color)) +
facet_wrap(~clarity) +
scale_color_brewer(type = "div")
# Create a scatter plot of the price/carat ratio
# of diamonds. The variable x should be
# assigned to cut. The points should be colored
# by diamond color, and the plot should be
# faceted by clarity.
# The plot should look something like this.
# http://i.imgur.com/YzbWkHT.jpg.
# Note: In the link, a color palette of type
# 'div' was used to color the histogram using
# scale_color_brewer(type = 'div')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
ggplot(data = diamonds, aes(x = cut, y = price/carat)) +
geom_point(aes(color = color), position = position_jitter(width = 0.4)) +
facet_wrap(~clarity) +
scale_color_brewer(type = "div")
hpi <- read.csv(file = 'hpi.csv')
names(hpi) = tolower(names(hpi))
names(hpi)
hpi <- read.csv(file = 'hpi.csv')
library(ggplot2)
library(gridExtra)
library(dplyr)
library('alr3')
library(dplyr)
workhours <- read.csv("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/workinghours.csv")
hpi <- read.csv(file = '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/hpi.csv')
hpi <- read.csv(file = '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/hpi.csv')
names(hpi) = tolower(names(hpi))
names(hpi)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
merged = merge(workhourssum,hpi, by = 'country')
write.csv(merged, 'workhours_hpi.csv')
write.csv(merged, '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
write.csv(merged, '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hpi <- read.csv(file = '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/hpi.csv')
names(hpi) = tolower(names(hpi))
names(hpi)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
head(workhourssum)
tail(workhourssum)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
head(workhourssum)
tail(workhourssum)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
workhours <- read.csv("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/workinghours.csv")
names(workhours)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
head(workhourssum)
tail(workhourssum)
merged = merge(workhourssum,hpi, by = 'country')
write.csv(merged, '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
library(ggplot2)
library(gridExtra)
library(dplyr)
library('alr3')
library("GGally")
library('reshape2')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hourshpi <- read.delim('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
View(hourshpi)
hourshpi <- read.csv('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
View(hourshpi)
names(hourshpi)
View(hourshpi)
names(hourshpi[1])
names(hourshpi[11])
names(hourshpi[11]) = 'well.being'
names(hourshpi)
ognames <- names(hourshpi)
names(hourshpi[11]) <- 'well.being'
names(hourshpi[11, 13,17, 10, 12, 16]) <- c('well.being', 'footprint', 'governance.rank','life.expectancy', 'happy.life.years', 'gdp')
names(hourshpi)
names(hourshpi[11, 13,17, 10, 12, 16])
names(hourshpi[11, 13,17])
names(hourshpi[11])
names(hourshpi[11]) <- 'well.being'
names(hourshpi)
names(hourshpi)[11, 13,17, 10, 12, 16]
names(hourshpi)[11]
names(hourshpi)[11]
names(hourshpi)[11] <- 'well.being'
names(hourshpi)[13] <- 'footprint'
names(hourshpi)[17] <- 'governance.rank'
names(hourshpi)[10] <- 'life.expectancy'
names(hourshpi)[12] <- 'happy.life.years'
names(hourshpi)[16] <- 'gdp'
View(hourshpi)
View(hourshpi)
summary(hourshpi)
quantile(hourshpi)
names(hourshpi)
summary(hourshpi)
hourshpi$gdp_norm = hourshpi$gdp/hourshpi$population
quantile(hourshpi$gdp_norm)
ggplot(data = hourshpi, aes(x = hpi.rank)) +
geom_histogram(aes(fill = well.being ))  +
facet_wrap(~quantile(gdp_norm))
str(hourshpi)
ggplot(data = hourshpi, aes(x = hpi.rank)) +
geom_histogram(aes(fill = quantile(well.being) ))  +
facet_wrap(~sub.region)
ggplot(data = hourshpi, aes(x = well.being)) +
geom_histogram(aes(fill = hpi.rank)  +
facet_wrap(~sub.region)
ggplot(data = hourshpi, aes(x = well.being)) +
geom_histogram(aes(fill = hpi.rank))  +
facet_wrap(~sub.region)
ggplot(data = hourshpi, aes(x = well.being)) +
geom_histogram()  +
facet_wrap(~sub.region)
ggplot(data = hourshpi, aes(x = well.being)) +
geom_histogram(aes(color = hpi.rank))  +
facet_wrap(~sub.region)
quantile(hourshpi$hpi.rank)
quantile[1](hourshpi$hpi.rank)
quantile(hourshpi$hpi.rank)
hourshpi$hpi.rank_quantile <- quantile(hourshpi$hpi.rank)
table(hourshpi$hpi.rank)
table(hourshpi)
quantile(hourshpi$hpi.rank)
summary(hourshpi$hpi.rank)
quartile(hourshpi$hpi.rank)
quantile(hourshpi$hpi.rank)
summary(hourshpi$hpi.rank)
source('~/Udacity/nispuf12.r', echo=TRUE)
source('~/Udacity/nispuf12.r', echo=TRUE)
source('~/Udacity/nispuf12.r', echo=TRUE)
View(NAMEWIDTH)
source('~/Udacity/nispuf12.r', echo=TRUE)
View(NISPUF12)
View(NISPUF12.CONTENTS)
names(NISPUF12)
str(NISPUF12)
install.packages(acs) #to access census data
install.packages('acs') #to access census data
library(acs) #to access census data
api.key.install(key = 'f5b1b754fdd17e5303b76d698e6905bcbb73c00e')
#crimes form 1996 to 2007 by 1990 census tract (can be tied to tract data)
df_seattlecrimestats1996to2007<- read.socrata("https://data.seattle.gov/Public-Safety/Seattle-Crime-Stats-by-1990-Census-Tract-1996-2007/e3zj-s4zh")
library(RSocrata) #to access socrata data
library(ggplot2)
library(gridExtra)
library(dplyr)
library(alr3)
library(GGally)
library(reshape2)
#crimes form 1996 to 2007 by 1990 census tract (can be tied to tract data)
df_seattlecrimestats1996to2007<- read.socrata("https://data.seattle.gov/Public-Safety/Seattle-Crime-Stats-by-1990-Census-Tract-1996-2007/e3zj-s4zh")
View(df_seattlecrimestats1996to2007)
setwd("~/Udacity/dataAnalysisR/EDA_R_Udacity/EDA_R_FinalProject")
install.packages('tidyr')
library(RSocrata) #to access socrata data
library(ggplot2)
library(gridExtra)
library(dplyr)
library(alr3)
library(GGally)
library(reshape2)
library(acs) #to access census data
library(tidyr) #bare bones data tidying library
vaccexempt_2011 <- read.csv('http://projects.seattletimes.com/2015/fyiguy/school-vaccines/assets/school_exemption_data_all_schools_2011-12.csv')
View(vaccexempt_2011)
vaccexempt_kindmmr <- read.socrata('https://data.kingcounty.gov/dataset/Kindergarten-MMR-Vaccine-Coverage/kbfa-mvcb')
View(vaccexempt_kindmmr)
vaccexempt_2013to2014 <- read.socrata('https://data.kingcounty.gov/dataset/Vaccination-Exemptions-in-King-County/xs83-3zit')
View(vaccexempt_kindmmr)
View(vaccexempt_2013to2014)
View(vaccexempt_2011)
