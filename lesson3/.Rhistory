install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
data(diamonds)
library(ggplot2)
data(diamonds)
summary(diamonds)
View(diamonds)
setwd("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3")
over50 = subset(workhours,value >= 50)
library(ggplot2)
library(ggthemes)
library(gridExtra)
workhours <- read.csv('workingHours.csv')
workhours[1] <- NULL
head(workhours)
ggplot(aes(x = value), data = workhours) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1))
ggplot(aes(x = value), data = workhours) +
geom_histogram(binwidth = .005,  color = 'black',fill = '#F79420') +
scale_x_log10()+
xlab('Log10(hours)')
ggplot(aes(x = value), data = workhours) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(40, 45), breaks = seq(40, 45, 1))
ggplot(aes(x = value), data = workhours) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
lower = subset(workhours,value < 31.5)
upper = subset(workhours,value >42 )
summary(workhours)
View(workhours)
over50 = subset(workhours,value >= 50)
ggplot(aes(x = value), data = over50) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(48, 57), breaks = seq(48, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
years = by(workhours$value, workhours$year)
years = by(workhours$value, workhours$year, summary)
years
country = by(workhours$value, workhours$country)
country = by(workhours$value, workhours$country,summary)
country
xlab('hours') +
scale_x_continuous(limits = c(48, 57), breaks = seq(48, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
```
ggplot(aes(x = value), data = years) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(48, 57), breaks = seq(48, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = workhours ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(48, 57), breaks = seq(48, 57, 1)) +
facet_wrap([~country,~year], ncol = 1, scales = 'free')
ggplot(aes(x = value), data = workhours ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(48, 57), breaks = seq(48, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year <=1990) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(48, 57), breaks = seq(48, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year <=1985) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(48, 57), breaks = seq(48, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year <=1982) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(48, 57), breaks = seq(48, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year <=1982) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year <=1985) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year <=1990) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year <=1985) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year == 1985 | year == 2007) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks
ggplot(aes(x = value), data = subset(workhours, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
years
years = by(workhours$value, workhours$year, min)
years
country = by(workhours$value, workhours$country,min)
yearsmax = by(workhours$value, workhours$years,max)
yearsmax = by(workhours$value, workhours$year,max)
country
yearsmin = by(workhours$value, workhours$year, min)
yearsmin
yearsmax = by(workhours$value, workhours$year,max)
yearsmax
yearsmin
View(over50)
ggplot(aes(x = value), data = subset(workhours, country == 'Korea, Rep.') ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(workhours, country == 'Korea, Rep.' & year > 2000) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(lower, country == year > 2000) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(lower, country == year > 2000) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(upper, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~year, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(upper, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(lower, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
lower = subset(workhours,value < 30)
ggplot(aes(x = value), data = subset(lower, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
View(workhours)
upperandUS = subset(workhours,value = >42 | country = 'United States')
lowerandUS = subset(workhours,value = <30 | country = 'United States')
upperandUS = subset(workhours,value  >42 | country = 'United States')
upperandUS = subset(workhours,value  >42 | country == 'United States')
lowerandUS = subset(workhours,value  <30 | country == 'United States')
ggplot(aes(x = value), data = subset(upperandUS, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(lowerandUS, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 57), breaks = seq(25, 57, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(upperandUS, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(33, 55), breaks = seq(33, 55, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
```
```{r}
ggplot(aes(x = value), data = subset(lowerandUS, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 38), breaks = seq(25, 38 , 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
```
ggplot(aes(x = value), data = subset(upperandUS, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(33, 55), breaks = seq(33, 55, 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
ggplot(aes(x = value), data = subset(lowerandUS, year >2001) ) +
geom_histogram(binwidth = .5,  color = 'black',fill = '#F79420') +
xlab('hours') +
scale_x_continuous(limits = c(25, 38), breaks = seq(25, 38 , 1)) +
facet_wrap(~country, ncol = 1, scales = 'free')
qplot(x = year, y = value,data = upperandUS,geom = 'boxplot') +
coord_cartesian()
qplot(x = year, y = value,data = upper,geom = 'boxplot') +
coord_cartesian()
---
title: "problemSet3"
output: html_document
---
#GGPlot2 Diamonds Data Set##
We need to perform some analysis on the ggplot2 diamonds data set to answer some questions.
**Questions:**
- How many observations are in the data set?
- How many variables are in the data set?
- How many ordered factors are in the data set?
- What letter represents the best diamond color?
##Load and Examine the data##
```{r}
library(ggplot2)
data(diamonds)
summary(diamonds)
```
There are 53940 observations and 10 variables.
Ordered factors inculude: cut, color, and clarity
color ranks include D, E, F, G, H, I, J
Which is best, let's look at the included documentation.
```{r}
?diamonds
```
>colour. diamond colour, from J (worst) to D (best).  So, D is the best.
##Create a Histogram of Diamond Prices##
```{r}
library(ggthemes)
```
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 100,  color = 'black',fill = '#F79420')
```
Data is long-tailed, transforming onto log scale
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = .05,  color = 'black',fill = '#F79420') +
scale_x_log10()+
xlab('Log10(price)')
```
The data appears to be bimodal.
##Descriptive Statistics of Price##
```{r}
summary(diamonds$price)
```
##Diamond Counts#
How many diamonds cost less than 500 USD?
```{r}
nrow(subset(diamonds, diamonds$price < 500))
```
How many diamonds cost less than 250 USD?
```{r}
nrow(subset(diamonds, diamonds$price < 250))
```
How many diamonds at least 15,000 USD?
```{r}
nrow(subset(diamonds, diamonds$price >= 15000))
```
##Eplore the largest Price Bin##
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 200,  color = 'black',fill = '#F79420') +
scale_x_continuous(limits = c(250, 1000), breaks = seq(250, 1000, 200))
```
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 100,  color = 'black',fill = '#F79420') +
scale_x_continuous(limits = c(250, 1000), breaks = seq(250, 1000, 50))
```
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 25,  color = 'black',fill = '#F79420') +
scale_x_continuous(limits = c(500, 1000), breaks = seq(500, 1000, 25))
```
The last one is too granular.  600 to 800 USD seems to be the sweet spot for low end diamond prices.
**Insight provide from the class:**
>There are no diamonds that cost $1500.
>For diamonds that cost less than $2,000, the most common price of a diamond is >around $700 with the mode being $605 (binwidth = 1).
I would like to explore this.
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 1,  color = 'black',fill = '#F79420') +
scale_x_continuous(limits = c(600, 850), breaks = seq(600, 850, 10))
```
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 1,  color = 'black',fill = '#F79420') +
scale_x_continuous(limits = c(600, 610), breaks = seq(600, 610, 1))
```
yup, 605.
```
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 100,  color = 'black',fill = '#F79420') +
scale_x_continuous(limits = c(1000, 2000), breaks = seq(1000, 2000, 100))
```
There has to be a better way to find disconinuities, but I'll keep zooming for now.
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 10,  color = 'black',fill = '#F79420') +
scale_x_continuous(limits = c(1400, 1600), breaks = seq(1400, 1600, 10))
```
Yeah, there is a large discontinuity.
##Break out the Histogram Diamond Prices by Cut##
I could use a grid to do this, but I'm going to start by trying a facet wrap.
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 100,  color = 'black',fill = '#F79420') +
facet_wrap(~cut,ncol = 1)
```
Data is long-tailed, transforming onto log scale
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = .05,  color = 'black',fill = '#F79420') +
scale_x_log10()+
xlab('Log10(price)') +
facet_wrap(~cut,ncol = 1)
```
The distributions have similiar shapes, the most different is the fair cut.
##Basic Price Information by Cut##
```{r}
by(diamonds$price,diamonds$cut,max)
by(diamonds$price,diamonds$cut,min)
by(diamonds$price,diamonds$cut,median)
```
##Free Scales##
```{r}
# In the two last exercises, we looked at
# the distribution for diamonds by cut.
# Run the code below in R Studio to generate
# the histogram as a reminder.
# ===============================================================
qplot(x = price, data = diamonds) + facet_wrap(~cut)
# ===============================================================
# In the last exercise, we looked at the summary statistics
# for diamond price by cut. If we look at the output table, the
# the median and quartiles are reasonably close to each other.
# diamonds$cut: Fair
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#     337    2050    3282    4359    5206   18570
# ------------------------------------------------------------------------
# diamonds$cut: Good
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#     327    1145    3050    3929    5028   18790
# ------------------------------------------------------------------------
# diamonds$cut: Very Good
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#     336     912    2648    3982    5373   18820
# ------------------------------------------------------------------------
# diamonds$cut: Premium
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#     326    1046    3185    4584    6296   18820
# ------------------------------------------------------------------------
# diamonds$cut: Ideal
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#     326     878    1810    3458    4678   18810
# This means the distributions should be somewhat similar,
# but the histograms we created don't show that.
# The 'Fair' and 'Good' diamonds appear to have
# different distributions compared to the better
# cut diamonds. They seem somewhat uniform
# on the left with long tails on the right.
# Let's look in to this more.
# Look up the documentation for facet_wrap in R Studio.
# Then, scroll back up and add a parameter to facet_wrap so that
# the y-axis in the histograms is not fixed. You want the y-axis to
# be different for each histogram.
# If you want a hint, check out the Instructor Notes.
```
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 100,  color = 'black',fill = '#F79420') +
facet_wrap(~cut,ncol = 1, scales = 'free')
```
```{r}
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = .05,  color = 'black',fill = '#F79420') +
scale_x_log10()+
xlab('Log10(price)') +
facet_wrap(~cut,ncol = 1, scales = 'free')
```
Now what we visualize is mathing up with what we know about the data (similiar distributions)
##Histogram of Price per Carat Faceted by Cut##
```{r}
ggplot(aes(x = price/carat), data = diamonds) +
geom_histogram(binwidth = 100,  color = 'black',fill = '#F79420') +
facet_wrap(~cut,ncol = 1, scales = 'free')
```
```{r}
ggplot(aes(x = price/carat), data = diamonds) +
geom_histogram(binwidth = .05,  color = 'black',fill = '#F79420') +
scale_x_log10()+
xlab('Log10(price/carat)') +
facet_wrap(~cut,ncol = 1, scales = 'free')
```
##Investigate the price of diamonds using box plots,numerical summaries, and one of the following categorical variables: cut, clarity, or color.##
```{r}
library(gridExtra)
```
```{r}
clarity = qplot(x = clarity, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian()
color = qplot(x = color, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian()
cut = qplot(x = cut, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian()
grid.arrange(clarity, color, cut, ncol = 1)
```
```{r}
clarity = qplot(x = clarity, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian(ylim = c(250,7000))
color = qplot(x = color, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian(ylim = c(250,7000))
cut = qplot(x = cut, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian(ylim = c(250,7000))
grid.arrange(clarity, color, cut, ncol = 1)
```
```{r}
by(diamonds$price,diamonds$cut, median)
by(diamonds$price,diamonds$cut, max)
by(diamonds$price,diamonds$cut, min)
by(diamonds$price,diamonds$cut, mean)
by(diamonds$price,diamonds$cut, median) - by(diamonds$price,diamonds$cut, mean)
```
I just find the trends in the medians interesting.  For cut, the medians are similiar except for ideal.  For color they tend to go up in a linear fashion to J (worst color rating), and for clarity they tend to go down.  What I see is that there are a variety of factors tha affect price. I think to really understand this we have to plot and view the data in other ways.
##Numerical Analysis##
-What is the price range for the middle 50% of diamonds with color D?
```{r}
by(diamonds$price,(diamonds$color == 'D'), summary)
```
-What is the price range for the middle 50% of diamonds with color J?
```{r}
by(diamonds$price,(diamonds$color == 'J'), summary)
```
-What is the IQR for diamonds wit the best color?
```{r}
by(diamonds$price,(diamonds$color == 'D'), IQR)
```
-What is the IQR for diamonds with the worst color?
```{r}
by(diamonds$price,(diamonds$color == 'J'), IQR)
```
Instructor Notes
You can use the function IQR() to find the interquartile range. Pass it a subset of the diamonds data frame.
For example...
IQR(subset(diamonds, price <1000)$price)
Remember subset returns a data frame so we need to use $price on the end to access that variable.
##Investigate the price per carat of diamonds across the different colors of diamonds using boxplots.##
```{r}
qplot(x = color, y = price/carat,data = diamonds,geom = 'boxplot') +
coord_cartesian()
qplot(x = color, y = price/carat,data = diamonds,geom = 'boxplot') +
coord_cartesian(ylim = c(250,7000))
```
##Investigate weight of diamonds (carat) with a frequency polygon##
**how does binwidth affect the polygon?**
```{r}
ggplot(aes(x = carat), data = diamonds) +
geom_freqpoly(binwidth = .5,color = 'red')+
scale_x_log10()
ggplot(aes(x = carat), data = diamonds) +
geom_freqpoly(binwidth = .05,color = 'red')+
scale_x_log10()
ggplot(aes(x = carat), data = diamonds) +
geom_freqpoly(binwidth = .01,color = 'red')+
scale_x_log10()
```
**What carat size(s) has a count > 2000?**
```{r}
#I have been using subset to do this, but instead used brackets as a select
#statement here, much like I do in PANDAS.
table(diamonds$carat)[table(diamonds$carat)>2000]
```
clarity = qplot(x = clarity, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian(ylim = c(250,7000))
color = qplot(x = color, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian(ylim = c(250,7000))
cut = qplot(x = cut, y = price,data = diamonds,geom = 'boxplot') +
coord_cartesian(ylim = c(250,7000))
grid.arrange(clarity, color, cut, ncol = 1)
qplot(x = country, y = value,data = upper,geom = 'boxplot') +
coord_cartesian()
qplot(x = country, y = value,data = upperandUS,geom = 'boxplot') +
coord_cartesian()
qplot(x = country, y = value,data = upperandUS,geom = 'boxplot') +
coord_cartesian(ylim(33,56))
qplot(x = country, y = value,data = upperandUS,geom = 'boxplot') +
coord_cartesian(ylim=c(33,56))
qplot(x = country, y = value,data = upperandUS,geom = 'boxplot') +
coord_cartesian(ylim=c(33,58))
qplot(x = country, y = value,data = lowerandUS,geom = 'boxplot') +
coord_cartesian(ylim=c(24,39))
