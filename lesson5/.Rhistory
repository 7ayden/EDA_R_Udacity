mystery
# You just created a new vector called mystery. What do you
# think is in this vector? (scroll down for the answer)
# Mystery is a vector that contains the number of characters
# for each of the names in udacious, including your name.
# 4. Run this next line of code.
mystery == 11
# Here we get a logical (or boolean) vector that tells us
# which locations or indices in the vector contain a name
# that has exactly 11 characters.
# 5. Let's use this boolean vector, mystery, to subset our
# udacious vector. What do you think the result will be when
# running the line of code below?
# Think about the output before you run this next line of code.
# Notice how there are brackets in the code. Brackets are often
# used in R for subsetting.
udacious[mystery == 11]
# Scroll down for the answer
# It's your Udacious Instructors for the course!
# (and you may be in the output if you're lucky enough
# to have 11 characters in YOUR_NAME) Either way, we
# think you're pretty udacious for taking this course.
# 6. Alright, all mystery aside...let's dive into some data!
# The R installation has a few datasets already built into it
# that you can play with. Right now, you'll load one of these,
# which is named mtcars.
# Run this next command to load the mtcars data.
data(mtcars)
# You should see mtcars appear in the 'Environment' tab with
# <Promise> listed next to it.
# The object (mtcars) appears as a 'Promise' object in the
# workspace until we run some code that uses the object.
# R has stored the mtcars data into a spreadsheet-like object
# called a data frame. Run the next command to see what variables
# are in the data set and to fully load the data set as an
# object in R. You should see <Promise> disappear when you
# run the next line of code.
# Visit http://cran.r-project.org/doc/manuals/r-release/R-lang.html#Promise-objects
# if you want the expert insight on Promise objects. You won't
# need to the info on Promise objects to be successful in this course.
names(mtcars)
# names(mtcars) should output all the variable
# names in the data set. You might notice that the car names
# are not a variable in the data set. The car names have been saved
# as row names. More on this later.
# You should also see how many observations (obs.) are in the
# the data frame and the number of variables on each observation.
# 7. To get more information on the data set and the variables
# run the this next line of code.
?mtcars
# You can type a '?' before any command or a data set to learn
# more about it. The details and documentation will appear in
# the 'Help' tab.
# 8. To print out the data, run this next line as code.
mtcars
# Scroll up and down in the console to check out the data.
# This is the entire data frame printed out.
# 9. Run these next two functions, one at a time,
# and see if you can figure out what they do.
str(mtcars)
dim(mtcars)
# Scroll down for the answer.
# The first command, str(mtcars), gives us the structure of the
# data frame. It lists the variable names, the type of each variable
# (all of these variables are numerics) and some values for each
# variable.
# The second command, dim(mtcars), should output '[1] 32 11'
# to the console. The [1] indicates that 32 is the first value
# in the output.
# R uses 1 to start indexing (AND NOT ZERO BASED INDEXING as is true
# of many other programming languages.)
# 10. Read the documentation for row.names if you're want to know more.
?row.names
# Run this code to see the current row names in the data frame.
row.names(mtcars)
# Run this code to change the row names of the cars to numbers.
row.names(mtcars) <- c(1:32)
# Now print out the data frame by running the code below.
mtcars
# It's tedious to relabel our data frame with the right car names
# so let's reload the data set and print out the first ten rows.
data(mtcars)
head(mtcars, 10)
# The head() function prints out the first six rows of a data frame
# by default. Run the code below to see.
head(mtcars)
# I think you'll know what this does.
tail(mtcars, 3)
# 11. We've run nine commands so far:
#      c, nchar, data, str, dim, names, row.names, head, and tail.
# All of these commands took some inputs or arguments.
# To determine if a command takes more arguments or to learn
# about any default settings, you can look up the documentation
# using '?' before the command, much like you did to learn about
# the mtcars data set and the row.names
# 12. Let's examine our car data more closely. We can access an
# an individual variable (or column) from the data frame using
# the '$' sign. Run the code below to print out the variable
# miles per gallon. This is the mpg column in the data frame.
mtcars$mpg
# Print out any two other variables to the console.
# This is a vector containing the mpg (miles per gallon) of
# the 32 cars. Run this next line of code to get the average mpg for
# for all the cars. What is it?
# Enter this number for the quiz on the Udacity website.
# https://www.udacity.com/course/viewer#!/c-ud651/l-729069797/e-804129314/m-830829287
mean(mtcars$mpg)
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
"Kunal Chawla", 'Andrew Bauman')
"Kunal Chawla", "Andrew Bauman")
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Andrew Bauman")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
names(mtcars)
?mtcars
?mtcars
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
data(mtcars)
head(mtcars, 10)
head(mtcars)
tail(mtcars, 3)
mtcars$mpg
mean(mtcars$mpg)
gwtwd()
getwd()
summary(mtcars)
efficient <- subset(mtcars, mpg >= 23)
View(efficient)
str(mtcars)
str(efficient)
dim(efficient)
subset(mtcars, mpg < 14 | disp > 390)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, qsec <= 16.90)
lightCars <- subset(mtcars, wt < 2)
mtcars$year <- 1974
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
subset(mtcars, mpg >= 30 | hp < 60)
```{r}
install.packages('knitr', dependencies = T)
library(knitr)
```
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
data(diamonds)
library(ggplot2)
data(diamonds)
summary(diamonds)
View(diamonds)
load("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/L4.RData")
#create data sets
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
#create plots
p1 = ggplot(aes(x = clarity, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = clarity))
p2 = ggplot(aes(x = color, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = color))
grid.arrange(p1,p2,ncol = 1)
library(ggplot2)
library(gridExtra)
library(dplyr)
library('alr3')
library(dplyr)
#create data sets
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
#create plots
p1 = ggplot(aes(x = clarity, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = clarity))
p2 = ggplot(aes(x = color, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = color))
grid.arrange(p1,p2,ncol = 1)
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
p3 = ggplot(aes(x = cut, y = price), data = diamonds) +
geom_bar(stat = 'identity', aes(fill = cut))
grid.arrange(p1,p2,p3,ncol = 1)
workhours <- read.csv("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/workinghours.csv")
names(workhours)
View(workhours)
gmp1 = ggplot(aes( x = year, y = value), data = workhours) +
geom_point(fill = 'orange')
gmp2 = ggplot(aes( x = country, y = value), data = workhours) +
geom_point(fill = 'red')
grid.arrange(gmp1,gmp2,ncol1)
gmp1 = ggplot(aes( x = year, y = value), data = workhours) +
geom_point(fill = 'orange')
gmp2 = ggplot(aes( x = country, y = value), data = workhours) +
geom_point(fill = 'red')
grid.arrange(gmp1,gmp2,ncol =1)
View(lightCars)
View(lightCars)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
pf$year_joined.bucket <- cut(pf$year_joined, c(2004,2009,2011,2012,2014))
table(pf$year_joined.bucket)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
pf$year_joined <- floor(2014 - pf$tenure/365)
summary(pf$year_joined)
table(pf$year_joined)
pf$year_joined.bucket <- cut(pf$year_joined, c(2004,2009,2011,2012,2014))
table(pf$year_joined.bucket)
# Create a line graph of friend_count vs. age
# so that each year_joined.bucket is a line
# tracking the median user friend_count across
# age. This means you should have four different
# lines on your plot.
# You should subset the data to exclude the users
# whose year_joined.bucket is NA.
# If you need a hint, see the Instructor Notes.
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===================================================
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
# Write code to do the following:
# (1) Add another geom_line to code below
# to plot the grand mean of the friend count vs age.
# (2) Exclude any users whose year_joined.bucket is NA.
# (3) Use a different line type for the grand mean.
# As a reminder, the parameter linetype can take the values 0-6:
# 0 = blank, 1 = solid, 2 = dashed
# 3 = dotted, 4 = dotdash, 5 = longdash
# 6 = twodash
# This assignment is not graded and
# will be marked as correct when you submit.
# The code from the last programming exercise should
# be your starter code!
# ENTER YOUR CODE BELOW THIS LINE
# ==================================================================
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary',fun.y = mean, linetype = 3)
# Write code to do the following:
# (1) Add another geom_line to code below
# to plot the grand mean of the friend count vs age.
# (2) Exclude any users whose year_joined.bucket is NA.
# (3) Use a different line type for the grand mean.
# As a reminder, the parameter linetype can take the values 0-6:
# 0 = blank, 1 = solid, 2 = dashed
# 3 = dotted, 4 = dotdash, 5 = longdash
# 6 = twodash
# This assignment is not graded and
# will be marked as correct when you submit.
# The code from the last programming exercise should
# be your starter code!
# ENTER YOUR CODE BELOW THIS LINE
# ==================================================================
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary',fun.y = mean, linetype = 3)
frate <- subset(pf$friend_count/pf$tenure, pf$tenure >=1)
mean(frate)
median(frate)
max(frate)
#here is how the instructor solved it
with(subset(pf, tenure >=1),summary(friend_count/tenure))
# Create a line graph of mean of friendships_initiated per day (of tenure)
# vs. tenure colored by year_joined.bucket.
# You need to make use of the variables tenure,
# friendships_initiated, and year_joined.bucket.
# You also need to subset the data to only consider user with at least
# one day of tenure.
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ========================================================================
pf$firate <- pf$friendships_initiated/pf$tenure
ggplot(aes(x = tenure, y = firate), data = subset(pf, firate >=1)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean)
#how the instructor did it
ggplot(aes(x=tenure, y = friendships_initiated/tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
#this is very noisy, how can I bin this data to reduce noise? See lesson 4 for more detail on this binning technique
ggplot(aes(x=7*round(tenure/7), y = friendships_initiated/tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x=30*round(tenure/30), y = friendships_initiated/tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x=90*round(tenure/90), y = friendships_initiated/tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
#this is one way of reducing noise/variance but a smoother might be a better option
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_smooth(aes(color = year_joined.bucket))
yo = read.csv('yogurt.csv')
str(yo)
yo$id <- factor(yo$id)
str(yo)
#create histogram of prices
save.image("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson5/RL5.RData")
ggplot(aes(x = price), data = yo)+
geom_histogram(color = 'black',fill = '#F79420')
ggplot(aes(x = price), data = yo)+
geom_histogram(binwidth = 10, color = 'black',fill = '#F79420')
help(transform)
View(yo)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
View(yo)
geom_histogram(bindwidth = 1, color = 'black', fill = 'orange')
#looking at distribution of prices
ggplot(data = yo, aes(x = all.purchases)) +
geom_histogram(bindwidth = 1, color = 'black', fill = 'orange')
geom_line()
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = price, y = time)) +
geom_line()
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = price, y = time)) +
geom_point()
ggplot(data = yo, aes(x = price, y = time)) +
coord_cartesian(xlim = c(0,75), ylim = c(0, 10400)) +
geom_point(alpha = .05, position = position_jitter(h = 0),
color = 'orange')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = price, y = time)) +
geom_point(alpha = .05, position = position_jitter(h = 0),
color = 'orange')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = time, y = price)) +
geom_point(alpha = .05, position = position_jitter(h = 0),
color = 'orange')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = time, y = price)) +
geom_point( position = position_jitter(h = 0),
color = 'orange')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = time, y = price)) +
geom_point(alpha = .1, position = position_jitter(h = 0),
color = 'orange')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = time, y = price)) +
geom_point(alpha = .01, position = position_jitter(h = 0),
color = 'orange')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = time, y = price)) +
geom_point(alpha = .05, position = position_jitter(h = 0),
color = 'orange')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = time, y = price)) +
coord_cartesian( ylim = c(21, 72)) +
geom_point(alpha = .05, position = position_jitter(h = 0),
color = 'orange')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
# ENTER YOUR CODE BELOW THIS LINE
# ================================================
ggplot(data = yo, aes(x = time, y = price)) +
coord_cartesian( ylim = c(21, 72)) +
geom_point(alpha = .25, position = position_jitter(h = 0),
color = 'orange')
set.seed(4230)
levels(yo$id)
sample(levels(yo$id), 16)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap(~id) + #facet by household
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
install.packages('GGally')
library("GGally")
theme_set(theme_minimal(20))
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap(~id) + #facet by household
geom_line() +
geom_point(aes(size = all.purchases), pch = 1) #size of points proportional to number of items purchased for the respective id.
set.seed(1836)
pf_subset <- pf[,c(2:15)] #slicing out the categorical variable columns because we are using scatter plots
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
nci <- read.table("nci.tsv")
#renaming columns for a nicer plot
colnames(nci) <- c(1:64)
View(nci)
save.image("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson5/RL5.RData")
