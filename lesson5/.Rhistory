# that a user joined facebook.
# See the Instructor Notes for three hints if you get
# stuck. Scroll down slowly to see one hint at a time
# if you would like some guidance.
# This programming exercise WILL BE automatically graded.
# DO NOT ALTER THE CODE BELOW THIS LINE
# ========================================================
#pf <- read.delim('/datasets/ud651/pseudo_facebook.tsv')
# ENTER YOUR CODE BELOW THIS LINE.
# ========================================================
# Create a variable called year_joined
# in the pf data frame using the variable
# tenure and 2014 as the reference year.
# The variable year joined should contain the year
# that a user joined facebook.
# See the Instructor Notes for three hints if you get
# stuck. Scroll down slowly to see one hint at a time
# if you would like some guidance.
# This programming exercise WILL BE automatically graded.
# DO NOT ALTER THE CODE BELOW THIS LINE
# ========================================================
#pf <- read.delim('/datasets/ud651/pseudo_facebook.tsv')
# ENTER YOUR CODE BELOW THIS LINE.
# ========================================================
pf$year_joined <- floor(2014 - pf$tenure/365)
summary(pf$year_joined)
table(pf$year_joined)
# Create a new variable in the data frame
# called year_joined.bucket by using
# the cut function on the variable year_joined.
# You need to create the following buckets for the
# new variable, year_joined.bucket
#        (2004, 2009]
#        (2009, 2011]
#        (2011, 2012]
#        (2012, 2014]
# Note that a parenthesis means exclude the year and a
# bracket means include the year.
# Look up the documentation for cut or try the link
# in the Instructor Notes to accomplish this task.
# DO NOT DELETE THE TWO LINES OF CODE BELOW THIS LINE
# ========================================================================
#pf <- read.delim('/datasets/ud651/pseudo_facebook.tsv')
#pf$year_joined <- floor(2014 - pf$tenure / 365)
# ENTER YOUR CODE BELOW THIS LINE
# ========================================================================
pf$year_joined.bucket <- cut(pf$year_joined, c(2004,2009,2011,2012,2014))
table(pf$year_joined.bucket)
# Create a line graph of friend_count vs. age
# so that each year_joined.bucket is a line
# tracking the median user friend_count across
# age. This means you should have four different
# lines on your plot.
# You should subset the data to exclude the users
# whose year_joined.bucket is NA.
# If you need a hint, see the Instructor Notes.
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===================================================
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
library(ggplot2)
library(gridExtra)
library(dplyr)
library('alr3')
library("GGally")
library('reshape2')
load(diamonds)
diamonds
data(diamonds)
summary(diamonds)
names(diamonds)
ggplot(data = diamonds, aes(x = prices)) +
geom_histogram()
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(data = diamonds, aes(x = price)) +
geom_histogram()
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap(~color)
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap(~color) +
scale_fill_brewer(type = 'qual')
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
scale_fill_brewer(type = 'qual') +
facet_wrap(~color)
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(fill = cut))  +
facet_wrap(~color)
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(fill = cut))  +
scale_x_log10() +
facet_wrap(~color)
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(fill = cut))  +
scale_x_log10() + #data is long-tailed
facet_wrap(~color) +
scale_fill_brewer(type = 'qual')
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(fill = cut))  +
scale_x_log10() + #data is long-tailed
facet_wrap(~color)
#scale_fill_brewer(type = 'qual') is an option per instructor notes but I don't like the colors
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(data = diamonds, aes(x= table, y = price)) +
geom_point()
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(data = diamonds, aes(x= price, y = table)) +
geom_point()
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(data = diamonds, aes(x= table, y = price)) +
geom_point()
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(data = diamonds, aes(x= table, y = price)) +
geom_point(aes(color = cut))
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(data = diamonds, aes(x= table, y = price)) +
geom_point(aes(color = cut)) +
scale_x_continuous(limits = c(50,80), breaks = seq(50,80,2))
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(data = diamonds, aes(x= table, y = price)) +
geom_point(aes(color = cut)) +
scale_x_continuous(limits = c(50,80), breaks = seq(50,80,2)) +
scale_fill_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut)) +
scale_colour_brewer(type = 'qual') +
scale_x_continuous(limits = c(50,80), breaks = seq(50,80,2))
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*x, y = price)) +
geom_point(color = clarity)
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*x, y = price)) +
geom_point(aes(color = clarity))
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*x, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0,1000), breaks = c(0,1000,100)) +
scale_color_brewer(type = 'div')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0,1000), breaks = c(0,1000,100)) +
scale_color_brewer(type = 'div')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0,900), breaks = c(0,900,100)) +
scale_color_brewer(type = 'div')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0,900), breaks = seq(0,900,100)) +
scale_color_brewer(type = 'div')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0,900), breaks = seq(0,400,50)) +
scale_color_brewer(type = 'div')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0,400), breaks = seq(0,400,50)) +
scale_color_brewer(type = 'div')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0,400), breaks = seq(0,400,50)) +
scale_y_continuous(limits = c(0,1200))
scale_color_brewer(type = 'div')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0,400), breaks = seq(0,400,50)) +
scale_color_brewer(type = 'div')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
xlab('volume') +
scale_x_continuous(limits = c(0,400), breaks = seq(0,400,50)) +
scale_color_brewer(type = 'div')
# not really liking the spread and it doesn't look like example plot
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point(aes(color = clarity)) +
xlab('volume') +
scale_y_log10() +
coord_cartesian(xlim = c(0, quantile(diamonds$volume, 0.99))) +
scale_color_brewer(type = "div")
ggplot(data = diamonds, aes(x = x*y*z, y = price)) +
geom_point(aes(color = clarity)) +
xlab('volume') +
scale_x_continuous(limits = c(0,400), breaks = seq(0,400,50)) +
scale_color_brewer(type = 'div')
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point(aes(color = clarity)) +
xlab('volume') +
scale_y_log10() +
#coord_cartesian(xlim = c(0, quantile(diamonds$volume, 0.99))) +
scale_color_brewer(type = "div")
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
diamonds$volume = diamonds$x * diamonds$y * diamons$z
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point(aes(color = clarity)) +
xlab('Volume') +
scale_x_continuous(limits = c(0,400), breaks = seq(0,400,50)) +
scale_color_brewer(type = 'div')
# not really liking the spread and it doesn't look like example plot
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point(aes(color = clarity)) +
xlab('Volume') +
scale_y_log10() +
coord_cartesian(xlim = c(0, quantile(diamonds$volume, 0.99))) +
scale_color_brewer(type = "div")
diamonds$volume = diamonds$x * diamonds$y * diamons$z
diamonds$volume = diamonds$x * diamonds$y * diamonds$z
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
diamonds$volume = diamonds$x * diamonds$y * diamonds$z
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point(aes(color = clarity)) +
xlab('Volume') +
scale_x_continuous(limits = c(0,400), breaks = seq(0,400,50)) +
scale_color_brewer(type = 'div')
# not really liking the spread and it doesn't look like example plot
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point(aes(color = clarity)) +
xlab('Volume') +
scale_y_log10() +
coord_cartesian(xlim = c(0, quantile(diamonds$volume, 0.99))) +
scale_color_brewer(type = "div")
pwd
getwd()
# Many interesting variables are derived from two or more others.
# For example, we might wonder how much of a person's network on
# a service like Facebook the user actively initiated. Two users
# with the same degree (or number of friends) might be very
# different if one initiated most of those connections on the
# service, while the other initiated very few. So it could be
# useful to consider this proportion of existing friendships that
# the user initiated. This might be a good predictor of how active
# a user is compared with their peers, or other traits, such as
# personality (i.e., is this person an extrovert?).
# Your task is to create a new variable called 'prop_initiated'
# in the Pseudo-Facebook data set. The variable should contain
# the proportion of friendships that the user initiated.
# This programming assignment WILL BE automatically graded.
# DO NOT DELETE THIS NEXT LINE OF CODE
# ========================================================================
pf <- read.delim('C:/Users/Andrew/Documents/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/pseudo_facebook.tsv')
# ENTER YOUR CODE BELOW THIS LINE
# ========================================================================
pf <- read.delim('C:/Users/Andrew/Documents/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/pseudo_facebook.tsv')
View(pf)
View(nci.long.samp)
data(diamonds)
summary(diamonds)
names(diamonds)
pf <- read.delim('C:/Users/Andrew/Documents/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/pseudo_facebook.tsv')
View(pf)
pf$prop_initiated = pf$friendships_initiated/pf$friend_count
View(pf)
pf <- transform(pf, prop_initiated = friendships_initiated/friend_count )
View(pf)
# Create a line graph of the proportion of
# friendships initiated ('prop_initiated') vs.
# tenure and color the line segment by
# year_joined.bucket.
# Recall, we created year_joined.bucket in Lesson 5
# by first creating year_joined from the variable tenure.
# Then, we used the cut function on year_joined to create
# four bins or cohorts of users.
# (2004, 2009]
# (2009, 2011]
# (2011, 2012]
# (2012, 2014]
# The plot should look something like this.
# http://i.imgur.com/vNjPtDh.jpg
# OR this
# http://i.imgur.com/IBN1ufQ.jpg
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================================
pf$year_joined.bucket <- cut(pf$year_joined, c(2004,2009,2011,2012,2014))
table(pf$year_joined.bucket)
pf$year_joined <- floor(2014 - pf$tenure/365)
# Create a line graph of the proportion of
# friendships initiated ('prop_initiated') vs.
# tenure and color the line segment by
# year_joined.bucket.
# Recall, we created year_joined.bucket in Lesson 5
# by first creating year_joined from the variable tenure.
# Then, we used the cut function on year_joined to create
# four bins or cohorts of users.
# (2004, 2009]
# (2009, 2011]
# (2011, 2012]
# (2012, 2014]
# The plot should look something like this.
# http://i.imgur.com/vNjPtDh.jpg
# OR this
# http://i.imgur.com/IBN1ufQ.jpg
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================================
pf$year_joined <- floor(2014 - pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined, c(2004,2009,2011,2012,2014))
table(pf$year_joined.bucket)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = age, y = prop_initiated),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = age, y = prop_initiated),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket))
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(pf$year_joined))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median) +
geom_smooth()
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(pf$year_joined))) +
geom_smooth(aes(color = year_joined.bucket))
