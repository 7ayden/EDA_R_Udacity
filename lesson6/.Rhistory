# The plot should look something like this.
# http://i.imgur.com/YzbWkHT.jpg.
# Note: In the link, a color palette of type
# 'div' was used to color the histogram using
# scale_color_brewer(type = 'div')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
ggplot(data = diamonds, aes(x = cut, y = price/carat)) +
geom_point(aes(color = color), position = position_jitter(width = 0.4)) +
facet_wrap(~clarity) +
scale_color_brewer(type = "div")
hpi <- read.csv(file = 'hpi.csv')
names(hpi) = tolower(names(hpi))
names(hpi)
hpi <- read.csv(file = 'hpi.csv')
library(ggplot2)
library(gridExtra)
library(dplyr)
library('alr3')
library(dplyr)
workhours <- read.csv("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/workinghours.csv")
hpi <- read.csv(file = '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/hpi.csv')
hpi <- read.csv(file = '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/hpi.csv')
names(hpi) = tolower(names(hpi))
names(hpi)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
merged = merge(workhourssum,hpi, by = 'country')
write.csv(merged, 'workhours_hpi.csv')
write.csv(merged, '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
write.csv(merged, '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hpi <- read.csv(file = '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/hpi.csv')
names(hpi) = tolower(names(hpi))
names(hpi)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
head(workhourssum)
tail(workhourssum)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
head(workhourssum)
tail(workhourssum)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
workhours <- read.csv("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson3/workinghours.csv")
names(workhours)
workhourssum <- workhours %>%
group_by(country) %>%
summarise(mean_hours = mean(value),
median_hours = median(as.numeric(value)),#necessary due to bug in version 0.4.1  (2015-01-14)
min_hours = min(value),
max_hours = max(value),
n = n()) %>%
arrange(max_hours)
head(workhourssum)
tail(workhourssum)
merged = merge(workhourssum,hpi, by = 'country')
write.csv(merged, '~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
library(ggplot2)
library(gridExtra)
library(dplyr)
library('alr3')
library("GGally")
library('reshape2')
hourshpi <- load('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
hourshpi <- read.delim('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
View(hourshpi)
hourshpi <- read.csv('~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson4/workhours_hpi.csv')
View(hourshpi)
names(hourshpi)
View(hourshpi)
names(hourshpi[1])
names(hourshpi[11])
names(hourshpi[11]) = 'well.being'
names(hourshpi)
ognames <- names(hourshpi)
names(hourshpi[11]) <- 'well.being'
names(hourshpi[11, 13,17, 10, 12, 16]) <- c('well.being', 'footprint', 'governance.rank','life.expectancy', 'happy.life.years', 'gdp')
names(hourshpi)
names(hourshpi[11, 13,17, 10, 12, 16])
names(hourshpi[11, 13,17])
names(hourshpi[11])
names(hourshpi[11]) <- 'well.being'
names(hourshpi)
names(hourshpi)[11, 13,17, 10, 12, 16]
names(hourshpi)[11]
names(hourshpi)[11]
names(hourshpi)[11] <- 'well.being'
names(hourshpi)[13] <- 'footprint'
names(hourshpi)[17] <- 'governance.rank'
names(hourshpi)[10] <- 'life.expectancy'
names(hourshpi)[12] <- 'happy.life.years'
names(hourshpi)[16] <- 'gdp'
View(hourshpi)
View(hourshpi)
summary(hourshpi)
quantile(hourshpi)
names(hourshpi)
summary(hourshpi)
hourshpi$gdp_norm = hourshpi$gdp/hourshpi$population
quantile(hourshpi$gdp_norm)
ggplot(data = hourshpi, aes(x = hpi.rank)) +
geom_histogram(aes(fill = well.being ))  +
facet_wrap(~quantile(gdp_norm))
str(hourshpi)
ggplot(data = hourshpi, aes(x = hpi.rank)) +
geom_histogram(aes(fill = quantile(well.being) ))  +
facet_wrap(~sub.region)
ggplot(data = hourshpi, aes(x = well.being)) +
geom_histogram(aes(fill = hpi.rank)  +
facet_wrap(~sub.region)
ggplot(data = hourshpi, aes(x = well.being)) +
geom_histogram(aes(fill = hpi.rank))  +
facet_wrap(~sub.region)
ggplot(data = hourshpi, aes(x = well.being)) +
geom_histogram()  +
facet_wrap(~sub.region)
ggplot(data = hourshpi, aes(x = well.being)) +
geom_histogram(aes(color = hpi.rank))  +
facet_wrap(~sub.region)
quantile(hourshpi$hpi.rank)
quantile[1](hourshpi$hpi.rank)
quantile(hourshpi$hpi.rank)
hourshpi$hpi.rank_quantile <- quantile(hourshpi$hpi.rank)
table(hourshpi$hpi.rank)
table(hourshpi)
quantile(hourshpi$hpi.rank)
summary(hourshpi$hpi.rank)
quartile(hourshpi$hpi.rank)
quantile(hourshpi$hpi.rank)
summary(hourshpi$hpi.rank)
setwd("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson6")
library(ggplot2)
library(gridExtra)
library(dplyr)
library('alr3')
library("GGally")
library('reshape2')
data(diamonds)
names(diamonds)
str(diamonds)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# Create two histograms of the price variable
# and place them side by side on one output image.
# We’ve put some code below to get you started.
# The first plot should be a histogram of price
# and the second plot should transform
# the price variable using log10.
# Set appropriate bin widths for each plot.
# ggtitle() will add a title to each histogram.
# You can self-assess your work with the plots
# in the solution video.
# ALTER THE CODE BELOW THIS LINE
# ==============================================
library(gridExtra)
plot1 <- ggplot(data = diamonds, aes(x = price)) +
geom_histogram(fill = 'red', color = 'black') +
ggtitle('Price')
plot2 <- ggplot(data = diamonds, aes(x = price)) +
geom_histogram(fill = 'red', color = 'black') +
scale_x_log10() +
ggtitle('Price (log10)') +
xlab('log10(Price)')
grid.arrange(plot1, plot2, ncol = 2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
install.packages('RColorBrewer')
library(RColorBrewer)
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position_jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(alpha = .5, size = .75, position_jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(alpha = .5, size = .75, position_jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(alpha = .5, size = .75, position_jitter())) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position_jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = jitter) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = jitter) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = jitter(price)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# Add a layer to adjust the features of the
# scatterplot. Set the transparency to one half,
# the size to three-fourths, and jitter the points.
# If you need hints, see the Instructor Notes.
# There are three hints so scroll down slowly if
# you don’t want all the hints at once.
# ALTER THE CODE BELOW THIS LINE
# =======================================================================
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
# Adjust the code below to color the points by clarity.
# A layer called scale_color_brewer() has
# been added to adjust the legend and
# provide custom colors.
# See if you can figure out what it does.
# Links to resources are in the Instructor Notes.
# You will need to install the package RColorBrewer
# in R to get the same colors and color palettes.
# =======================================
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', aes(fill = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
# Adjust the code below to color the points by clarity.
# A layer called scale_color_brewer() has
# been added to adjust the legend and
# provide custom colors.
# See if you can figure out what it does.
# Links to resources are in the Instructor Notes.
# You will need to install the package RColorBrewer
# in R to get the same colors and color palettes.
# =======================================
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load(BigDiamonds.rda)
load(BigDiamonds.Rda)
load("~/Udacity/dataAnalysisR/EDA_R_Udacity/lesson6/BigDiamonds.Rda")
